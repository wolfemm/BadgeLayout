apply plugin: 'com.android.library'

ext {
    currentVersionCode = 2016122301
    currentVersionName = '0.1.1'

    groupId = 'au.com.dardle'
    artifactId = 'badgelayout'

    packageRepo = 'maven'
    packageName = 'BadgeLayout'
    packageDescription = 'A layout to display a list of badges, tags, or labels'
    packageWebsite = 'https://github.com/luxiliu/BadgeLayout'
    packageIssueTracker = 'https://github.com/luxiliu/BadgeLayout/issues'
    packageVCS = 'https://github.com/luxiliu/BadgeLayout.git'
    packageLicenses = ["Apache-2.0"]
    packageLicenseName = 'The Apache License, Version 2.0'
    packageLicenseUrl = 'http://www.apache.org/licenses/LICENSE-2.0.txt'
}


android {
    compileSdkVersion 25
    buildToolsVersion '25.0.2'

    defaultConfig {
        minSdkVersion 15
        targetSdkVersion 25
        versionCode currentVersionCode
        versionName currentVersionName

        testInstrumentationRunner "android.support.test.runner.AndroidJUnitRunner"

    }
    buildTypes {
        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
        }
    }
    lintOptions {
        abortOnError false
    }
}

dependencies {
    compile fileTree(include: ['*.jar'], dir: 'libs')
    androidTestCompile('com.android.support.test.espresso:espresso-core:2.2.2', {
        exclude group: 'com.android.support', module: 'support-annotations'
    })
    compile 'com.android.support:appcompat-v7:25.1.0'
    testCompile 'junit:junit:4.12'
}


apply plugin: 'com.github.dcendents.android-maven'

group = groupId

install {
    repositories.mavenInstaller {
        // This generates POM.xml with proper parameters
        pom {
            project {
                packaging 'aar'
                groupId groupId
                artifactId artifactId

                name packageName
                description packageDescription
                url packageWebsite

                licenses {
                    license {
                        name packageName
                        url packageLicenseUrl
                    }
                }
                developers {
                    developer {
                        name 'Luxi Liu'
                        email 'luxi.liu@gmail.com'
                    }
                }
                scm {
                    connection packageVCS
                    developerConnection packageVCS
                    url packageWebsite
                }
            }
        }
    }
}


apply plugin: 'com.jfrog.bintray'

version = currentVersionName

if (project.hasProperty("android")) { // Android libraries
    task sourcesJar(type: Jar) {
        classifier = 'sources'
        from android.sourceSets.main.java.srcDirs
    }

    task javadoc(type: Javadoc) {
        source = android.sourceSets.main.java.srcDirs
        classpath += project.files(android.getBootClasspath().join(File.pathSeparator))
    }
} else { // Java libraries
    task sourcesJar(type: Jar, dependsOn: classes) {
        classifier = 'sources'
        from sourceSets.main.allSource
    }
}

task javadocJar(type: Jar, dependsOn: javadoc) {
    classifier = 'javadoc'
    from javadoc.destinationDir
}

artifacts {
    archives javadocJar
    archives sourcesJar
}

// Bintray
bintray {
    user = BADGELAYOUT_BINTRAY_USER
    key = BADGELAYOUT_BINTRAY_APIKEY

    configurations = ['archives']
    pkg {
        repo = packageRepo
        name = packageName
        desc = packageDescription
        websiteUrl = packageWebsite
        issueTrackerUrl = packageIssueTracker
        vcsUrl = packageVCS
        licenses = packageLicenses
        publish = true
        publicDownloadNumbers = true
        version {
            gpg {
                sign = true
                passphrase = BADGELAYOUT_BINTRAY_GPS_PASSWORD
            }
        }
    }
}
